  

 Department of Computer Science   
 Database Systems   
  
 Database Systems    
 News 
  Team | Back 
  Members | Back 
  Torsten Grust 
  Marina Ketterer 
  Björn Bamberg 
  Denis Hirn 
  Louisa Lambrecht 
  Tim Fischer 
  More... 
  Alumni | Back 
  Alexander Ulrich 
  Benjamin Dietrich 
  Christian Duta 
  Daniel O'Grady 
  Dennis Butterstein 
  Fabian Kliebhan 
  George Giorgidze 
  Jan Rittinger 
  Jeroen Weijers 
  Manuel Mayr 
  Melanie Herschel 
  Monika Weber 
  Noah Doersing 
  Tobias Müller 
  Tom Schreiber 
  More... 
  More... 
  Teaching | Back 
  General Information on Courses | Back 
  Research Internships 
  Presentations 
  Seminar Papers 
  Review Cycle 
  More... 
  Winter 2024/25 | Back 
  Informatik 1 
  SQL is a Programming Language 
  Utilizing Machine Learning in Data Management 
  More... 
  Summer 2024 | Back 
  Advanced SQL 
  DB2 
  Selected Fun Problems of the ACM Programming Contest (proseminar) 
  Team Project: The Construction of an SASL-Compiler 
  More... 
  Winter 2023/24 | Back 
  Machine Learning in Datenbanksystemen und Datenmanagement 
  What Makes the Duck Quack? 
  More... 
  Summer 2023 | Back 
  DB1 
  Functional Programming 
  Selected Fun Problems of the ACM Programming Contest (Proseminar) 
  More... 
  Winter 2022/23 | Back 
  Info 1 (Praktische Informatik 1: Deklarative Programmierung) 
  SQL is a Programming Language 
  More... 
  Summer 2022 | Back 
  Advanced SQL 
  DB2 
  Teamprojekt: The Construction of an SASL-Compiler 
  More... 
  Archive 
  More... 
  Research | Back 
  Current Projects | Back 
  Recursive Computation Over Relational Data 
  Rethinking Fixpoint Computation 
  UDF Compilation 
  More... 
  Past Projects | Back 
  Data Provenance for SQL 
  Database Supported Haskell 
  Ferry 
  Habitat 
  Pathfinder 
  Software/Hardware Codesign 
  More... 
  Student Research Projects 
  More... 
  Publications 
  Theses 
  Contact 

 You are here:  University 
  ... 
  Computer Science 
  Database Systems 
  Teaching 
  General Information on Courses 
  Seminar Papers 

 Teaching    
 General Information on Courses | Research Internships 
  Presentations 
  Seminar Papers 
  Review Cycle 
  Winter 2024/25 | Informatik 1 
  SQL is a Programming Language 
  Utilizing Machine Learning in Data Management 
  Summer 2024 | Advanced SQL 
  DB2 
  Selected Fun Problems of the ACM Programming Contest (proseminar) 
  Team Project: The Construction of an SASL-Compiler 
  Winter 2023/24 | Machine Learning in Datenbanksystemen und Datenmanagement 
  What Makes the Duck Quack? 
  Summer 2023 | DB1 
  Functional Programming 
  Selected Fun Problems of the ACM Programming Contest (Proseminar) 
  Winter 2022/23 | Info 1 (Praktische Informatik 1: Deklarative Programmierung) 
  SQL is a Programming Language 
  Summer 2022 | Advanced SQL 
  DB2 
  Teamprojekt: The Construction of an SASL-Compiler 
  Archive 

 Seminar Papers  

 Each seminar includes writing a paper of your topic.  
 Process  
 You can start working on your paper before or after your presentation. The timing is up to you. The closer the preparation is to the presentation, the more present the content will be to you. 
  Please, hand in your submission via email: | db-lehre@cs.uni-tuebingen.de | (do not send your submission to individual team members) 
  Submission deadline for the first version of your paper is | February 15 | in winter term and | August 15 | in summer term. 
  Submission deadline for the final version after the | review cycle | is | March 15 | in winter term and | September 15 | in summer term. Please include paper, slides, and code (if applicable; preferably a GitHub link/invitation) in your final submission. 
  Form  
 The paper of your programming topic must be written with LaTeX. For this purpose the | two-column | SIGCONF Proceedings | template must be used. You can use the | original template | or this | reduced version | . 
  For | figures | , you can use | TikZ | . 
  The paper should be | 4-6 pages | in total and written in English. 
  For linguistic correctness in English, we recommend using | Grammarly | , | DeepL | or similar tools (not ChatGPT). 
  Literature | to improve your writing: Zobel, Justin: Writing for Computer Science 
  Content  
 [for our programming seminars:] Your paper should include some form of discussion where you critically review your work in terms of | performance analysis (O-notation). | Please, do not include measurements on how long the programm ran on your personal laptop. These numbers don’t tell us anything. 
  scalability. | Does run time increase significantly when choosing larger inputs? When are space limitations met (e.g. stack overflow)? 
  programming language. | In hindsight, was the programming language appropriate for the problem? Which language properties were especially useful/difficult? 
  your implementation. | Are there aspects of the implementation you would do differently next time? 
  Evaluation Criteria  
 The following evaluation criteria will be applied to the papers:  
 Form (typesetting, illustrations, formatting) 
  Language (grammar, comprehensibility) 
  Presentation of the own solution (intelligibility, correctness, comprehensibility, critical view) 
  As a rule, the paper makes up the main part of the final grade.  
 Examples of past, (very) good seminar papers  
 Befunge-93 in SQL (Tim Fischer) | [SQL is a Programming Language] 
  Distance-Vector Routing With SQL (Alexej Onken) | [SQL is a Programming Language] 
  Common pitfalls  
  
 we often find student papers to be/have… | please, instead … 
 ❌ incomplete in terms of content | ✅ abstract  , introduction  , discussion (critical view) and conclusion  are also inherent parts of a paper. 
 ❌ frequent orthographic and grammatical errors | ✅ use Grammarly  , DeepL  or similar tools. 
 ❌ punctuation errors | ✅ use commas  , hyphens, dashes  , semicolons, and colons  correctly (different from German). 
 ❌ passive voice | ✅ use active voice as often as possible: “I/we analyse/implement/investigate” is perfectly fine. 
 ❌ complicated sentences that (are supposed to) sound intelligent | ✅ KISS is as important for writing as for programming. 
 ❌ wall of text vs. one sentence paragraphs/sections | ✅ choose appropriate paragraph lengths. 
 ❌ show off your intellect by using phrases like “obviously”, “very easy”, “as we all know” | ✅ stay objective. At best, something is “well-known”. 
 ❌ ie, i. e., “… mammals e.g. elephants, …” | ✅ know your latin. 
 ❌ “there are 3 different …” | ✅ spell out numbers 1-10. When to spell out numbers. 
 ❌ several synonyms to vary expressions and avoid repitition | ✅ stick to one word/phrase for a concept, no need to confuse the reader. 
 ❌ lessen the strength of your statements by using filling words etc. | ✅ be clear  (even if it feels bold). 
 ❌ “in figure 3…”, “in the upcoming Section…” | ✅ If a figure, table, section,… is referenced by number, capitalize. If not, don’t. 
  
 Additionally,  
 listings: | provide a caption, reference it in the text, provide line numbering, use syntax highlighting and a typewriter-style font 
  figures: | provide a caption (below!), reference it in the text, pay attention to similar spacing above and below the figure 
  tables: | provide a caption, reference it in the text, use booktabs style 

 © 2024 Eberhard Karls Universität Tübingen, Tübingen  
   
 Imprint 
  Data Privacy Statement 
  Barrierefreiheit 
  RSS-Feed 
  Print 

  