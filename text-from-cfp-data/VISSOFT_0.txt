Software Visualization     
 Visualizing the structure, behaviour, and evolution of software   
     
 Skip to content    
 Home 
  About 
  Books 
  Conferences 
  Definitions 
  Groups 
  Papers | Overviews 
  Evaluation 
  Software Structure 
  Software Behaviour 
  Software Evolution 
  Software Security 
  Algorithm Animation 
  3D Software Visualization 
  Resources 
  Talks 
  Tools 
  Videos 

 ←  Ordering Fields and Methods in Software    
 VisWeek 2012 →     
   
 VISSOFT 2011 Paper Highlights   
 Posted on  February 1, 2012   by  Fabian Beck     
   VISSOFT 2011  , the 6th IEEE International Workshop on Visualizing Software for Understanding and Analysis, took place in Williamsburg, Virginia, USA, September 29-30, 2011 and was co-located with ICSM 2011  . The proceedings are available in the IEEE Xplore Digital Library  . Of the 21 full papers submitted to the workshop, nine were accepted (acceptance rate: 42%).  
 This post is by Fabian Beck  a new contributor to the SoftVis blog and presents the nine full papers of VISSOFT 2011 in form of a structured review.  
 Code Dependencies  
 Dependencies between source code artifacts provide insights in the structure of a software system. Visualizing them is challenging because of the sheer quantity of dependencies usually included in a system. Often the hierarchical organization of the system (e.g., a hierarchical package structure) helps to structure or simplify these dependencies. Among the papers presented at VISSOFT 2011, many involve the visualization of code dependencies, the following three, however, having them in particular focus.  
 Caserta et al.  use the hierarchical organization to map the source code artifacts to a two-dimensional plane exploiting a city metaphor. On top of this plane, in the third dimension, they draw the dependencies that link the artifacts. The authors reduce the visual complexity of the diagram by bundling the dependencies, again using the hierarchical structure of the artifacts. Such hierarchical edge bundling is also used in the approach by Beck F. et al.  , which focuses on comparing different types of code dependencies. They arrange the hierarchically structured artifacts linearly from top to bottom. Each type of dependency is depicted in a narrow stripe. By arranging the stripes side-by-side these types can be visually compared. The idea of depicting different types of dependencies is also present in the approach by Erdemir et al.  They link those dependencies to different quality metrics by encoding them in the shape, color, texture, etc., of the nodes. A distinguishing feature of their approach is the intuitive mapping between metrics and visual attributes.  
 Pierre Caserta | , | Olivier Zendra | , | Damien Bodenes | : 3D Hierarchical Edge bundles to visualize relations in a software city metaphor. | [PDF] 
  Fabian Beck | , | Radoslav Petkov | , | Stephan Diehl | : Visually exploring multi-dimensional code couplings. | [PDF] 
  Ural Erdemir | , | Umut Tekin | , | Feza Buzluca | : E-Quality: A graph based object oriented software quality visualization tool. | [publisher] 
  Dynamic Program Behavior  
 The analysis of the dynamic behavior of software systems is usually facing even larger sets of data than the analysis of static code dependencies. Visualization approaches depicting such dynamic data, hence, have to apply some form of aggregation to handle the data. As the following two examples show, this aggregation can be realized in different ways.  
 Code Dependencies can be enriched by dynamic information, for instance, as demonstrated by Deng et al.  : They enforce structural dependencies if the connected code entities are covered by the same set of test cases. This dynamic relational information is only used to arrange a large set of code entities onto a two-dimensional plane. For reasons of scalability, their visualization shows these entities as color-coded dots, but does not depict dependencies. Choudhury and Rosen  introduce an animated visualization technique for representing runtime memory transactions of a program. Elements of accessed data, visually encoded as glyphs, move between levels of a simulated cache. These glyphs form abstract visual structures that provide insights into the composition and eviction of the cache. The authors suggest that their approach fosters program comprehension with respect to the dynamic behavior of the program.  
 Fang Deng | , | Nicholas DiGiuseppe | , | James A. Jones | : Constellation visualization: Augmenting program dependence with dynamic information. | [PDF] 
  A. N. M. Imroz Choudhury | , | Paul Rosen | : Abstract visualization of runtime memory behavior. | [PDF] 
  Visual Analytics Tools & Case Studies  
 Over the last decade, many software visualization approaches have been proposed, but only very few of them reached wide impact in practice. A reason could be that academia did not sufficiently embed those visualizations into real-world scenarios and development processes. The following analytics tools and case studies might lessen this gap.  
 When gaining information by visually analyzing a software system, a software developer wants to react to these new insights. Beck M. et al.  introduce a tool for planning the reengineering of a software system, that is, changing the software design at a high level. Their tool is also based on a visualization of code dependencies attached with a hierarchy. The innovative features of their approach are the flexible interaction techniques for changing the hierarchy (i.e., the software design). Also Broeksema and Telea  target at supporting developers in changing a software system: They investigate the effort to port a system from an older version of a library to a newer one. Their visualization, which they implemented as an IDE plug-in for KDevelop, provides an overview on the necessary changes and guide the developer to realize them.  
 Neu et al.  study not only single software projects, but the ecosystems the individual projects are embedded in. They developed a web application that visualizes the evolution of such ecosystems. As an extensive case study, the GNOME project is analyzed. Long practiced but only recently considered as a serious development method, sketches are explored by Walny et al.  In semi-structured interviews they evaluated how software developers in academia use these ad-hoc software visualizations. The interviews reveal that sketches are applied in a broad spectrum of scenarios and are often saved and reused in later stages of development.  
 Martin Beck | , | Jonas Trümper | , | Jürgen Döllner | : A visual analysis and design tool for planning software reengineerings. | [PDF] 
  Bertjan Broeksema | , | Alexandru Telea | : Visual support for porting large code bases. | [PDF] 
  Sylvie Neu | , | Michele Lanza | , | Lile Hattori | , | Marco D’Ambros | : Telling stories about GNOME with Complicity. | [PDF] 
  Jagoda Walny | , | Jonathan Haber | , | Marian Dörk | , | Jonathan Sillito | , | M. Sheelagh T. Carpendale | : Follow that sketch: Lifecycles of diagrams and sketches in software development. | [PDF] 

 Share this:  
 Facebook 
  X 

 Like   Loading...    
     
 Related   

 This entry was posted in Conferences  , Papers  , Summary  and tagged city metaphor  , conferences  , software dependencies  , software visualization  , tools  , vissoft  , visual analytics  . Bookmark the permalink  .   
   
 ←  Ordering Fields and Methods in Software    
 VisWeek 2012 →     
   
 Leave a comment Cancel reply    

 Δ     

 Search for: 
  Recent Posts | SoftVis Developer Job at Grappl 
  Shonan Seminar #192 – Augmented Software Visualization 
  Job at Grappl – 3D graphics for code understanding 
  IEEE VISSOFT 2023 
  Algovis 
  Archives | February 2024 
  November 2023 
  September 2023 
  June 2022 
  May 2022 
  April 2022 
  August 2021 
  June 2021 
  May 2021 
  September 2020 
  April 2020 
  February 2020 
  January 2020 
  October 2019 
  September 2019 
  April 2019 
  March 2019 
  February 2019 
  November 2018 
  October 2018 
  September 2018 
  August 2018 
  March 2018 
  October 2017 
  September 2017 
  July 2017 
  June 2017 
  May 2017 
  March 2017 
  January 2017 
  September 2016 
  May 2016 
  March 2016 
  April 2015 
  February 2015 
  January 2015 
  December 2014 
  July 2014 
  March 2014 
  September 2013 
  July 2013 
  May 2013 
  January 2013 
  September 2012 
  July 2012 
  June 2012 
  May 2012 
  March 2012 
  February 2012 
  January 2012 
  December 2011 
  November 2011 
  October 2011 
  September 2011 
  August 2011 
  July 2011 
  June 2011 
  May 2011 
  April 2011 
  March 2011 
  February 2011 
  December 2010 
  October 2010 
  September 2010 
  July 2010 
  June 2010 
  Categories | Algorithm Animation 
  Announcements 
  Book Reviews 
  Conferences 
  Eclipse 
  Java 
  Other 
  Papers 
  plugin 
  Positions 
  Presentations 
  References 
  Research 
  Summary 
  Tools 
  Uncategorized 
  Visualization Techniques 
  Blogroll | Eager Eyes 
  Flowing Data 
  Information Aesthetics 
  Information Is Beautiful 
  Never Work In Theory 
  Visualizeit 
  Whiley 

 Software Visualization | algorithm visualization 
  architecture 
  bugs 
  call graphs 
  city metaphor 
  collaboration 
  computer graphics 
  computer resources 
  conference 
  conferences 
  data visualization 
  definitions 
  demonstration 
  discovery 
  eclipse 
  empirical 
  empirical data 
  empirical studies 
  evaluation 
  explorer 
  gestures 
  graph visualization 
  human factors 
  human subjects 
  icse highlights 
  ICSM 
  IDE 
  information visualization 
  interaction 
  ipad 
  jobs 
  kinect 
  modelling 
  models 
  multi-touch 
  navigation 
  pair programming 
  performance 
  PhD 
  PhD position 
  plugin 
  post-doc 
  posters 
  programming 
  programming languages 
  refactoring 
  Research 
  social networking 
  social network visualization 
  softvis 
  software dependencies 
  software design 
  software engineering 
  software evolution 
  software metrics 
  software requirements 
  software traces 
  software visualization 
  structure 
  survey 
  tool demos 
  tools 
  UML 
  usability 
  user experiment 
  user studies 
  user study 
  video 
  vissoft 
  visual analytics 
  visual debugging 
  visualization 
  wikis 
  workshop 
  XCode 

 Software Visualization    
 Blog at WordPress.com.    

  Privacy & Cookies: This site uses cookies. By continuing to use this website, you agree to their use.  
  To find out more, including how to control cookies, see here: Cookie Policy     
   
 Comment 
  Reblog 
  Subscribe | Subscribed | Software Visualization 
   Join 27 other subscribers         Sign me up    Already have a WordPress.com account? Log in now. 
  Software Visualization 
  Customize 
  Subscribe | Subscribed 
  Sign up 
  Log in 
  Copy shortlink 
  Report this content 
  View post in Reader 
  Manage subscriptions 
  Collapse this bar 

 Loading Comments...    

 Write a Comment...   Email (Required)    Name (Required)    Website      

   %d    

   Design a site like this with WordPress.com   
 Get started     
  